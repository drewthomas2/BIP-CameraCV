# BIP C0L0R SENSOR PROTOTYPE
# DREW THOMAS
# 1/13/24

from __future__ import print_function
import numpy as np
import cv2 as cv
import sys
import argparse
import colorsys
# from scipy import stats


import time
from picamera2 import Picamera2, Preview

picam = Picamera2()

config = picam.create_preview_configuration()
picam.configure(config)

picam.start_preview(Preview.QTGL)

picam.start()
time.sleep(2)
picam.capture_file("test-python.jpg")

picam.close()

#reading image
img = cv.imread("test-python.jpg")
if img is None:
    print('Could not open or find the image:', args.input)
    exit(0)

# REDUCING IMAGE RESOLUTION 
redu_factor = 0.1
new_img = cv.resize(img, None, fx = redu_factor, fy = redu_factor, interpolation = cv.INTER_AREA)
height, width = new_img.shape[:2]
print('height: ' + str(height) + ' width: ' + str(width))

# CONVERT TO HSV
hsv = cv.cvtColor(new_img, cv.COLOR_BGR2HSV)
h, s, v = cv.split(hsv)
h, s, v = cv.split(hsv)
# b_hist = cv.calcHist(h, [0], None, [histSize], histRange, accumulate=accumulate)
# hist_w = 540
# hist_h = 400
# bin_w = int(round( hist_w/histSize ))
# histImage = np.zeros((hist_h, hist_w, 3), dtype=np.uint8)
# cv.normalize(b_hist, b_hist, alpha=0, beta=hist_h, norm_type=cv.NORM_MINMAX)
# for i in range(1, histSize):
#     cv.line(histImage, ( bin_w*(i-1), hist_h - int(b_hist[i-1]) ), ( bin_w*(i), hist_h - int(b_hist[i]) ), ( 179, 0, 0), thickness=2)
h, s, v = cv.split(hsv)  
# b_hist = cv.calcHist(h, [0], None, [histSize], histRange, accumulate=accumulate)
# hist_w = 540
# hist_h = 400
# bin_w = int(round( hist_w/histSize ))
# histImage = np.zeros((hist_h, hist_w, 3), dtype=np.uint8)
# cv.normalize(b_hist, b_hist, alpha=0, beta=hist_h, norm_type=cv.NORM_MINMAX)
# for i in range(1, histSize):
#     cv.line(histImage, ( bin_w*(i-1), hist_h - int(b_hist[i-1]) ), ( bin_w*(i), hist_h - int(b_hist[i]) ), ( 179, 0, 0), thickness=2)

# m_h = stats.mode(h)
# m_s = stats.mode(s)
# m_v = stats.mode(v)

m_h = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=0, arr=h)
m_s = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=0, arr=s)
m_v = np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=0, arr=v)
mode_h = m_h[0][0]
mode_s = m_s[0][0]
mode_v = m_v[0][0]
print('h: ' + str(mode_h) + '  s: ' + str(mode_s) + '  v: ' + str(mode_v))


